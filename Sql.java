/* Generated By:JavaCC: Do not edit this line. Sql.java */
package edu.buffalo.cse.sql;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;

import edu.buffalo.cse.sql.optimizer.QueryOptimizer;
import edu.buffalo.cse.sql.parser.*;
import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.Schema.TableFromFile;
import edu.buffalo.cse.sql.data.Datum;
import edu.buffalo.cse.sql.index.IndexCreation;
import edu.buffalo.cse.sql.interpret.IndexScanInterpreter;
import edu.buffalo.cse.sql.interpret.LimitInterpreter;
import edu.buffalo.cse.sql.interpret.PreviousOutput;
import edu.buffalo.cse.sql.interpret.ProjectionInterpreter;
import edu.buffalo.cse.sql.interpret.RAInterpreter;
import edu.buffalo.cse.sql.interpret.RAInterpreterStack;
import edu.buffalo.cse.sql.interpret.ScanInterpreter;
import edu.buffalo.cse.sql.parser.SQLtoRATranslator;
import edu.buffalo.cse.sql.plan.AggregateNode;
import edu.buffalo.cse.sql.plan.JoinNode;
import edu.buffalo.cse.sql.plan.NullSourceNode;
import edu.buffalo.cse.sql.plan.PlanNode;
import edu.buffalo.cse.sql.plan.ProjectionNode;
import edu.buffalo.cse.sql.plan.PlanNode.Type;
import edu.buffalo.cse.sql.plan.ScanNode;
import edu.buffalo.cse.sql.plan.SelectionNode;
import edu.buffalo.cse.sql.plan.UnionNode;

public class Sql {
	
	public static List<Datum[]> outputList=new ArrayList<Datum[]>();
	public static List<Datum[]> lsPreviousStep=new ArrayList<Datum[]>();
	public static Map mpAliasTable = new HashMap();
	public static Map mpTableAlias=new HashMap();
	public static int iCount=-1;
	public static boolean isTPCH = false;
	public static boolean isExplain=false;
	public static String filename=null;
	
	public static void main(String[] args) {		
				
		File f=null;
		if (args[0].contains("explain")) {
			isExplain = true;
			//args[1] = "test\\TPCH_Q10.SQL";
			if (args[1].contains("TPCH")) {
				isTPCH = true;
				filename=args[1];
				System.out.println("filename = "+filename);
				mpAliasTable.put("'l'", "'LINEITEM'");
				mpTableAlias.put("'LINEITEM'", "'l'");
				mpAliasTable.put("'c'", "'CUSTOMER'");
				mpTableAlias.put("'CUSTOMER'", "'c'");
				mpAliasTable.put("'p'", "'PART'");
				mpTableAlias.put("'PART'", "'p'");
				mpAliasTable.put("'o'", "'ORDERS'");
				mpTableAlias.put("'ORDERS'", "'o'");
				mpAliasTable.put("'s'", "'SUPPLIER'");
				mpTableAlias.put("'SUPPLIER'", "'s'");
				mpAliasTable.put("'n'", "'NATION'");
				mpTableAlias.put("'NATION'", "'n'");
				mpAliasTable.put("'r'", "'REGION'");
				mpTableAlias.put("'REGION'", "'r'");
			}
			f = new File(args[1]);
		}else if(args[0].contains("index")){
			filename=args[1];
			String query=args[1].toString().trim();
			IndexCreation.createIndexes(query);
			
			
		}else{
		//	args[0] = "test\\TPCH_Q10_LIMIT.SQL";
			filename=args[0];
			System.out.println("filename ------------------------------------->"+filename);
			f = new File(args[0]);
		}

		try {
			execFile(f);
		} catch (SqlException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static List<Datum[]> execQuery(Map<String, Schema.TableFromFile> tables, PlanNode q)	throws SqlException {
	//	System.out.println("RA tree i/p = "+q);
		System.out.println("Optimizing Query .......");
		
		System.out.println("=== Before ===");
		System.out.println(q);
		q = QueryOptimizer.optimizeQuery(q);
		if (isExplain) {
			System.out.println("\n\n=== After ===");
			System.out.println(q);
			System.exit(0);
		}
		System.out.println("\n\n=== After ===");
		System.out.println(q);
		
		
		/**this system.exit is to test for rewrite**/
		iCount++;
		if(iCount>0){
			PreviousOutput.lsPrevious.clear();
			PreviousOutput.previous=null;
			ProjectionInterpreter.lsProject.clear();
			ScanInterpreter.mpScanned.clear();
		}		
		
		RAInterpreter.interpreteRA(q);
		RAInterpreterStack.popStack();	
		System.out.println("COMPLETED EXEC QUERY !! ");
		System.out.println("Output Size = "+Sql.outputList.size());
		displayOutput();
		return Sql.outputList;
	}

	public static List<List<Datum[]>> execFile(File program) throws SqlException {
		List<List<Datum[]>> result = new ArrayList<List<Datum[]>>();
		
		
		
		//TODO: Call parser generated by JavaCC
		HashMap<String, TableFromFile> tables = new HashMap<String, Schema.TableFromFile>();
		List<PlanNode> planNodes = new ArrayList<PlanNode>();
		try {
			SQLtoRATranslator parser = new SQLtoRATranslator(new FileInputStream(program));
			//parser.start(tables, planNodes);
			Program prgmObj= parser.Program();
			tables=prgmObj.tables;
			planNodes=prgmObj.queries;
			
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		for (PlanNode node : planNodes) {
			result.add(execQuery(tables, node));
		}
		//System.out.println("THE GENERATED RA QUERY = \n"+planNodes);
		return result;
//		throw new SqlException("execQuery() is unimplemented");
	}
	
	public static void displayOutput(){
		
		Iterator itr = Sql.outputList.iterator();
		while(itr.hasNext()){
			Datum out[]= (Datum[])itr.next();
			for(int i=0;i<out.length;i++){
				System.out.print(out[i]+" ");
			}
			System.out.println();
		}
	}
}